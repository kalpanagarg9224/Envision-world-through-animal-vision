// Generated by view binder compiler. Do not edit!
package animalVision.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import animalVision.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentStartBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button loginBtn;

  @NonNull
  public final TextView noAcc;

  @NonNull
  public final TextView or;

  @NonNull
  public final Button signupBtn;

  @NonNull
  public final TextView startGettingStarted;

  @NonNull
  public final TextView startTxt1;

  private FragmentStartBinding(@NonNull RelativeLayout rootView, @NonNull Button loginBtn,
      @NonNull TextView noAcc, @NonNull TextView or, @NonNull Button signupBtn,
      @NonNull TextView startGettingStarted, @NonNull TextView startTxt1) {
    this.rootView = rootView;
    this.loginBtn = loginBtn;
    this.noAcc = noAcc;
    this.or = or;
    this.signupBtn = signupBtn;
    this.startGettingStarted = startGettingStarted;
    this.startTxt1 = startTxt1;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentStartBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentStartBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_start, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentStartBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.login_btn;
      Button loginBtn = ViewBindings.findChildViewById(rootView, id);
      if (loginBtn == null) {
        break missingId;
      }

      id = R.id.no_acc;
      TextView noAcc = ViewBindings.findChildViewById(rootView, id);
      if (noAcc == null) {
        break missingId;
      }

      id = R.id.or;
      TextView or = ViewBindings.findChildViewById(rootView, id);
      if (or == null) {
        break missingId;
      }

      id = R.id.signup_btn;
      Button signupBtn = ViewBindings.findChildViewById(rootView, id);
      if (signupBtn == null) {
        break missingId;
      }

      id = R.id.start_getting_started;
      TextView startGettingStarted = ViewBindings.findChildViewById(rootView, id);
      if (startGettingStarted == null) {
        break missingId;
      }

      id = R.id.start_txt1;
      TextView startTxt1 = ViewBindings.findChildViewById(rootView, id);
      if (startTxt1 == null) {
        break missingId;
      }

      return new FragmentStartBinding((RelativeLayout) rootView, loginBtn, noAcc, or, signupBtn,
          startGettingStarted, startTxt1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
